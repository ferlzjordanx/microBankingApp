spring.application.name=account-service
server.port=8081

# enable discovery & point at server
eureka.client.enabled=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
# nice readable instance id in the Eureka UI
eureka.instance.instance-id=account-service:8081

# avoid datasource errors until Stage 3
#spring.autoconfigure.exclude=\
#org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\
#org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration

# --- JDBC / JPA (local) ---
spring.datasource.url=jdbc:mysql://localhost:3306/account_db?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=Paco@1357

# For learning: let Hibernate create/update tables now (we'll tighten later)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# If you added Thymeleaf but have no templates yet:
spring.thymeleaf.check-template-location=false

##account-service (consumer)
#spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
#spring.kafka.consumer.group-id=account-consumer
#spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.consumer.properties.spring.json.trusted.packages=*

